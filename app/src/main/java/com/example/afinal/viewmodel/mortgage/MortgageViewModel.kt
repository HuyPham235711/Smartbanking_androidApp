package com.example.afinal.viewmodel.mortgage

import androidx.lifecycle.ViewModel
import androidx.lifecycle.viewModelScope
import com.example.afinal.data.mortgage.MortgageAccountEntity
import com.example.afinal.data.mortgage.MortgageRepository
import com.example.afinal.data.mortgage.MortgageScheduleEntity
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.launch
import java.util.Calendar

class MortgageViewModel(
    private val repository: MortgageRepository
) : ViewModel() {

    private val _accounts = MutableStateFlow<List<MortgageAccountEntity>>(emptyList())
    val accounts: StateFlow<List<MortgageAccountEntity>> = _accounts

    private val _schedule = MutableStateFlow<List<MortgageScheduleEntity>>(emptyList())
    val schedule: StateFlow<List<MortgageScheduleEntity>> = _schedule

    // üß† L∆∞u l·∫°i ID c·ªßa user hi·ªán t·∫°i ƒë·ªÉ reload d·ªØ li·ªáu
    private var currentOwnerId: String? = null

    /** üè¶ N·∫°p to√†n b·ªô t√†i kho·∫£n vay (ch·ªâ d√†nh cho officer) */
    fun loadAccounts() {
        viewModelScope.launch {
            _accounts.value = repository.getAllAccounts()
        }
    }

    /** üìÖ N·∫°p l·ªãch tr·∫£ n·ª£ cho m·ªôt kho·∫£n vay c·ª• th·ªÉ */
    fun loadSchedule(mortgageId: String) {
        viewModelScope.launch {
            _schedule.value = repository.getSchedulesByMortgage(mortgageId)
        }
    }

    /** üë§ N·∫°p danh s√°ch kho·∫£n vay thu·ªôc v·ªÅ m·ªôt user */
    fun loadMortgagesForUser(accountId: String) {
        currentOwnerId = accountId
        viewModelScope.launch {
            _accounts.value = repository.getAccountsByOwner(accountId)
        }
    }

    /** üí∞ ƒê√°nh d·∫•u k·ª≥ tr·∫£ n·ª£ l√† "PAID" r·ªìi reload l·∫°i UI */
    fun markSchedulePaid(scheduleId: String, mortgageId: String) {
        viewModelScope.launch {
            repository.markScheduleAsPaid(scheduleId)
            loadSchedule(mortgageId) // reload l·∫°i list ƒë·ªÉ UI ƒë·ªïi m√†u
        }
    }

    /** üÜï Th√™m kho·∫£n vay m·ªõi ‚Äî ch·ªâ officer d√πng */
    fun addMortgage(
        accountName: String,
        principal: Double,
        annualRate: Double,
        termMonths: Int,
        ownerAccountId: String
    ) {
        viewModelScope.launch {
            val start = Calendar.getInstance().timeInMillis

            val account = MortgageAccountEntity(
                accountName = accountName,
                principal = principal,
                annualInterestRate = annualRate,
                termMonths = termMonths,
                startDate = start,
                remainingBalance = principal,
                status = "ACTIVE",
                ownerAccountId = ownerAccountId
            )

            // ‚úÖ G·ªçi repository t·ª± insert + generate schedule + sync Firestore
            repository.insertAccountWithSchedule(account)

            // ‚úÖ Reload l·∫°i danh s√°ch ƒë√∫ng cho user hi·ªán t·∫°i
            loadMortgagesForUser(ownerAccountId)
        }
    }

    init {
        // ‚ùå Kh√¥ng c·∫ßn listener Firestore, v√¨ d·ªØ li·ªáu ƒë√£ sync xu·ªëng Room ·ªü MainActivity
        println("üèÅ Customer MortgageViewModel initialized (local-only mode, Firestore sync handled at startup).")
    }
}
